<?php
/**
 * @file
 * A block module that displays recent blog and forum posts.
 */
 
/**
 * Implements hook_help()
 *
 * Displays help and module information.
 *
 * @param path
 *  Which path of the site we're using to display help
 * @param arg
 *  Array the holds the current path as returned from arg() function
 */
function current_posts_help($path, $arg) {
  switch ($path) {
    case "admin/help#current_posts":
      return '<p>' . t("A block module that displays recent blog and forum posts.") . '</p>';
      break;
  }
}

/**
 * Implements hook_block_info()
 */
function current_posts_block_info() {
  $blocks['current_posts'] = array(
    'info' => t('Current Posts'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view()
 */
function current_posts_block_view($delta = '') {
  switch ($delta) {
    case 'current_posts':
      $block['subject'] = t('Current Posts');
      if (user_access('access content')) {
        $result = current_posts_contents();
        $items = array();
        foreach ($result as $node) {
          $items[] = array(
            'data' => l($node->title, 'node/' . $node->nid),
          );
          
          if (empty($items)) {
            $block['content'] = t('No posts available.');
          } 
          else {
             $block['content'] = theme('item_list', array(
               'items' => $items));
          }
        }
      }
      return $block;
      break;
   }
}

/**
 * Custom content function.
 *
 * Set beginning and end dates, retrieve posts from database
 * saved in that time period.
 *
 * @return
 *  A result set of the targeted posts.
 */
function current_posts_contents() {
  $today = getdate();
  $start_time = mktime(0, 0, 0, $today['mon'], ($today['mday'] - 7), $today['year']);
  $end_time = time();
  
  $query = db_select('node', 'n')
    ->fields('n', array('nid', 'title', 'created'))
    ->condition('status', 1)
    ->condition('created', array($start_time, $end_time), 'BETWEEN')
    ->orderBy('created', 'DESC')
    ->execute();
  return $query;
}

/**
 * Implements hook_update_N()
 */
function current_posts_update_7000(&$sandbox) {
  if (!isset($sandbox['progress'])) {
    $sandbox['progress'] = 0;
    $sandbox['current_uid'] = 0;
    $sandbox['max'] = db_query('SELECT COUNT(DISTINCT UID) FROM {users}')->fetchField() - 1;
  }
  
  $users = db_select('users', 'u')
    ->fields('u', array('uid', 'name'))
    ->condition('uid', $sandbox['current_uid'], '>')
    ->range(0, 3)
    ->orderBy('uid', 'ASC')
    ->execute();
    
  foreach ($users as $user) {
    $user->name .= '!';
    db_update('users')
      ->fields(array('name' => $user->name))
      ->conditiom('uid', $user->uid)
      ->execute();
      
    $sandbox['progress']++;
    $sandbox['current_uid'] = $user->uid;
  }
  
  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : ($sandbox['progress'] / $sandbox['max']);
  
  return t('The update did what it was supposed to do.');
  
  throw new DrupalUpdateException('Something went wrong!');
}
  
  
  