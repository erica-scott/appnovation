<?php
/**
 * @file
 * Test file for jdt_user_notes.
 */

include_once 'jdt_user_notes.crud.inc';

/**
 * Class to test CRUD file.
 */
class JDTUserNotesCRUDTest extends DrupalWebTestCase {
  protected $priviledgedUser;

  /**
   * Provides the user interface information.
   */
  public static function getInfo() {
    $info = array(
      'name' => 'JDT User Notes CRUD Test',
      'description' => 'Asserts that JDT User Notes CRUD methods work properly',
      'group' => 'JDT User Notes',
    );

    return $info;
  }

  /**
   * Sets up the proper environment needed to run tests.
   */
  public function setUp() {
    parent::setUp(array('jdt_user_notes'));
  }

  /**
   * Tests CRUD Create function.
   */
  public function testJdtUserNotesCreate() {
    $fields = array(
      'article_nid' => 0,
      'author_uid' => 0,
      'note_text' => 'Blah blah blah',
    );

    $note_id = jdt_user_notes_create($fields);
    $this->assertNotNull($note_id,
        'If insert is success, should not return null');
    $check = db_select('jdt_user_notes', 'j')
      ->fields('j')
      ->condition('note_id', $note_id, '=')
      ->execute()
      ->fetchAssoc();

    $this->assertEqual($check['article_nid'], 0);
    $this->assertEqual($check['author_uid'], 0);
    $this->assertEqual($check['note_text'], 'Blah blah blah');
  }

  /**
   * Tests the CRUD Read function.
   */
  public function testJdtUserNotesRead() {
    $note_id = db_insert('jdt_user_notes')
      ->fields(array(
        'article_nid' => 0,
        'author_uid' => 0,
        'note_text' => 'Blah blah blah',
      ))
      ->execute();

    $return = jdt_user_notes_read($note_id);

    $found = !empty($return);

    $this->assertTrue($found, 'Should return true because the select
     should not return an empty array');
    $this->assertEqual($return['article_nid'], 0);
    $this->assertEqual($return['author_uid'], 0);
    $this->assertEqual($return['note_text'], 'Blah blah blah');
  }

  /**
   * Tests the CRUD Update function.
   */
  public function testJdtUserNotesUpdate() {
    $note_id = db_insert('jdt_user_notes')
      ->fields(array(
        'article_nid' => 0,
        'author_uid' => 0,
        'note_text' => 'Blah blah blah',
      ))
      ->execute();

    $new_fields = array(
      'article_nid' => 1,
      'author_uid' => 0,
      'note_text' => 'This is the changed text!',
    );
    $result = jdt_user_notes_update($note_id, $new_fields);

    $this->assertEqual($result, 1, 'Rows affected should = 1');
    $check = db_select('jdt_user_notes', 'j')
      ->fields('j')
      ->condition('note_id', $note_id, '=')
      ->execute()
      ->fetchAssoc();

    $this->assertEqual($check['article_nid'], 1);
    $this->assertEqual($check['author_uid'], 0);
    $this->assertEqual($check['note_text'], 'This is the changed text!');
  }

  /**
   * Tests the CRUD Delete function.
   */
  public function testJdtUserNotesDelete() {
    $note_id = db_insert('jdt_user_notes')
      ->fields(array(
        'article_nid' => 0,
        'author_uid' => 0,
        'note_text' => 'Blah blah blah',
      ))
      ->execute();

    $result = jdt_user_notes_delete($note_id);

    $this->assertEqual($result, 1, 'Rows affected should = 1');
    $check = db_select('jdt_user_notes', 'j')
      ->fields('j')
      ->condition('note_id', $note_id, '=')
      ->execute()
      ->fetchAssoc();

    $found = empty($check);
    $this->assertTrue($found, 'This select should return nothing, because
     the note has been deleted');
  }

}
