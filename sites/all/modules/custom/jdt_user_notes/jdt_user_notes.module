<?php
/**
 * @file
 * JDT User Notes Module File.
 */

/**
 * Include CRUD file.
 */
include_once 'jdt_user_notes.crud.inc';

/**
 * Implements hook_permission().
 */
function jdt_user_notes_permission() {
  $permissions = array(
    'create notes' => array(
      'title' => t('Add a Note'),
    ),
    'read notes' => array(
      'title' => t('Read a Note'),
    ),
    'update notes' => array(
      'title' => t('Edit a Note'),
    ),
    'delete notes' => array(
      'title' => t('Delete a Note'),
    ),
  );

  return $permissions;
}

/**
 * Implements hook_menu().
 */
function jdt_user_notes_menu() {
  $items = array();

  $items['node/%node/add'] = array(
    'title' => 'Add a Note',
    'page callback' => 'jdt_user_notes_add',
    'page arguments' => array(1),
    'access arguments' => array('create notes'),
  );

  $items['node/%node/edit/%'] = array(
    'title' => 'Edit a Note',
    'page callback' => 'jdt_user_notes_edit',
    'page arguments' => array(1, 3),
    'access arguments' => array('update notes'),
  );

  $items['node/%node/notes'] = array(
    'title' => 'My Notes',
    'page callback' => 'jdt_user_notes_display',
    'page arguments' => array(1),
    'access callback' => 'jdt_user_notes_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Callback function for add notes page.
 */
function jdt_user_notes_add($article_nid) {
  $note_id = NULL;
  $form = drupal_get_form('jdt_user_notes_form', $note_id, $article_nid);
  return $form;
}

/**
 * Callback function for edit notes page.
 */
function jdt_user_notes_edit($article_nid, $note_id) {
  $existing_note = jdt_user_notes_read($note_id);

  if (empty($existing_note) || $existing_note['article_nid'] != $article_nid->nid) {
    $message = 'This article note does not exist.';
    $form = drupal_get_form('jdt_user_notes_error_form', $message);
  }
  else {
    $form = drupal_get_form('jdt_user_notes_form', $article_nid, $note_id);
  }

  return $form;
}

/**
 * Callback function for displaying article notes.
 */
function jdt_user_notes_display($article_nid) {
  global $user;

  $notes = jdt_user_notes_read_article($article_nid->nid);
  dpm($notes);

  $output = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('notes-container'),
    ),
  );

  $i = 0;
  foreach ($notes as $note) {
    $output['note-container-' . $i] = array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array('note-container'),
      ),
    );

    $output['note-container-' . $i]['note-text'] = array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array('note-text'),
      ),
    );

    $output['note-container-' . $i]['note-text']['text'] = array(
      '#type' => 'markup',
      '#markup' => $note['note_text'],
    );

    $output['note-container-' . $i]['node-title'] = array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array('node-title'),
      ),
    );

    $output['note-container-' . $i]['node-title']['title'] = array(
      '#type' => 'markup',
      '#markup' => $article_nid->title,
    );

    $output['note-container-' . $i]['node-author'] = array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array('node-author'),
      ),
    );

    $output['note-container-' . $i]['node-author']['author'] = array(
      '#type' => 'markup',
      '#markup' => $user->name,
    );
    
    $i++;
  }

  return $output;
}

/**
 * Validates both the add and edit forms.
 *
 * Ensures note_title and note_body do not exceed 255 characters.
 */
function jdt_user_notes_validate($form, &$form_state) {
  if (strlen($form_state['input']['note_title']) > 254) {
    form_set_error('note_title', t('Your note title must be less than 255 
      characters.'));
  }
  if (strlen($form_state['input']['note_body']) > 254) {
    form_set_error('note_body', t('Your note body must be less than 255 
      characters.'));
  }
}

/**
 * Access callback function for notes page.
 */
function jdt_user_notes_access($article_nid) {
  global $user;

  $article_notes = jdt_user_notes_read_article($article_nid->nid);

  // Check if any notes exist, and if any belong to user.
  $my_notes = 0;
  foreach ($article_notes as $note) {
    if ($note['author_uid'] == $user->uid) {
      $my_notes++;
    }
  }

  // Only show the tab if node type is article, and there are notes that 
  // belong to the user.
  if ($my_notes > 0 && $article_nid->type == 'article') {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Submits data for jdt_user_notes_add().
 */
function jdt_user_notes_add_submit($form, &$form_state) {
  global $user;

  $fields = array(
    'article_nid' => $form_state['build_info']['args']['article_nid'],
    'author_uid' => $user->uid,
    'note_title' => $form_state['input']['note_title'],
    'note_text' => $form_state['input']['note_body'],
  );

  $result = jdt_user_notes_create($fields);

  if ($result == NULL) {
    drupal_set_message(t('There was an error creating this note.'), 'error');
  }
  else {
    drupal_set_message(t('This note has been succesfully created!'));
  }
}

/**
 * Submits data for jdt_user_notes_edit().
 */
function jdt_user_notes_edit_submit($form, &$form_state) {
  global $user;

  $fields = array(
    'article_nid' => $form_state['build_info']['args']['article_nid'],
    'author_uid' => $user->uid,
    'note_title' => $form_state['input']['note_title'],
    'note_text' => $form_state['input']['note_body'],
  );

  $note_id = intval($form_state['build_info']['args']['note_id']);

  $result = jdt_user_notes_update($note_id, $fields);

  if ($result === 0) {
    drupal_set_message(t('There was an error editting this note.'), 'error');
  }
  else {
    drupal_set_message(t('This note has been succesfully editted!'));
  }
}

/**
 * Custom adding/editting form.
 */
function jdt_user_notes_form($form, &$form_state, $note_id, $article_nid) {

  if (!empty($note_id)) {
    $note = jdt_user_notes_read($note_id);
  }

  $form['note_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#value' => isset($note['note_title']) ? $note['note_title'] : '',
    '#maxlength' => 254,
  );

  $form['note_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Body'),
    '#value' => isset($note['note_text']) ? $note['note_text'] : '',
    '#attributes' => array('maxlength' => 254),
  );

  $form_state['build_info']['args']['article_nid'] = $article_nid->nid;

  $form_state['build_info']['args']['note_id'] = $note_id;

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => isset($note) ? t('Edit') : t('Create'),
  );

  $form['#validate'][] = 'jdt_user_notes_validate';
  if (isset($note)) {
    $form['#submit'][] = 'jdt_user_notes_edit_submit';
  }
  else {
    $form['#submit'][] = 'jdt_user_notes_add_submit';
  }

  return $form;
}

/**
 * Custom form for any error that occurs.
 */
function jdt_user_notes_error_form($form, &$form_state, $message) {
  drupal_set_message(t($message), 'error');

  return $form;
}
